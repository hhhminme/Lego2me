version: "3"

services:
  db:
    image: mongo:latest
    restart: unless-stopped #컨테이너 스탑하기전까지 항상 재시작
    volumes:
      - mongoVolume:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: legolego
      MONGO_INITDB_DATABASE: django_mongodb_docker
      MONGODB_DATA_DIR: /var/lib/docker/volumes/mongo
    ports:
      - 27017:27017

  backend:
    container_name: lego2me_django
    image: django
    build:
      context: ./backend
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - 8000:8000
    volumes:
      - ./backend/:/backend/
    expose:
      - 8001
    depends_on:
      - db
      - rabbitmq
      # - redis

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
      - /usr/src/app/.next

  rabbitmq:
    hostname: rabbitmq
    image: rabbitmq:3.7.14-management-alpine # 웹 UI management 툴 포함
    # 환경변수 설정
    environment:
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      #- RABBITMQ_HOSTS=rabbitmq:5672

    ports:
      - "5672:5672" # rabbitMQ default port
      - "15672:15672" # UI를 위한 port

    #restart: on-failure #정상적으로 종료되지않은 경우에만 재시작 (오류코드 0 아니면 재시작)

  celery:
    image: django
    working_dir: /backend/
    command: celery -A lego2me worker -l info
    volumes:
      - ./backend/:/backend/
    depends_on:
      - backend
    #restart: on-failure

  # redis:
  #   image: redis:alpine
  #   ports:
  #     - "6379:6379"

  nginx:
    image: nginx
    container_name: nginx_service
    volumes:
      - ./nginx:/etc/nginx/conf.d/nginx.conf
    ports:
      - "80:80"
    depends_on:
      - backend

volumes:
  mongoVolume:
